{"ast":null,"code":"var _jsxFileName = \"/Users/yunshine/Code/yunshine/Next-101/Fetching & Server API/pages/post.js\";\nimport React from \"react\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nimport { withRouter } from 'next/router';\nimport axios from 'axios';\n\nconst Post = props => __jsx(\"div\", {\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 5,\n    columnNumber: 3\n  }\n}, __jsx(\"h1\", {\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 6,\n    columnNumber: 5\n  }\n}, \"Post Page. These are the comments for post #\", props.id), props.comments.map(comment => // <p>{comment.email}</p>\n__jsx(Comment, _extends({}, comment, {\n  key: comment.id,\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 9,\n    columnNumber: 7\n  }\n}))));\n\nconst Comment = ({\n  email,\n  body\n}) => __jsx(\"div\", {\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 15,\n    columnNumber: 3\n  }\n}, __jsx(\"h5\", {\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 16,\n    columnNumber: 5\n  }\n}, email), __jsx(\"p\", {\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 17,\n    columnNumber: 5\n  }\n}, body), __jsx(\"br\", {\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 18,\n    columnNumber: 5\n  }\n}));\n\nPost.getInitialProps = async ({\n  query\n}) => {\n  const res = await axios.get(`https://jsonplaceholder.typicode.com/comments?postId=${query.id}`);\n  const {\n    data\n  } = res;\n  console.log(data[0]);\n  return _objectSpread(_objectSpread({}, query), {}, {\n    comments: data\n  });\n};\n\nexport default Post; //   const Post = withRouter((props) => (\n//     <h1>Post Page. You are looking at post #{props.router.query.id}</h1>\n//   ));\n// export default withRouter(Post);","map":{"version":3,"sources":["/Users/yunshine/Code/yunshine/Next-101/Fetching & Server API/pages/post.js"],"names":["withRouter","axios","Post","props","id","comments","map","comment","Comment","email","body","getInitialProps","query","res","get","data","console","log"],"mappings":";;;;;;;;;;;;AAAA,SAASA,UAAT,QAA2B,aAA3B;AACA,OAAOC,KAAP,MAAkB,OAAlB;;AAEA,MAAMC,IAAI,GAAIC,KAAD,IACX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mDAAiDA,KAAK,CAACC,EAAvD,CADF,EAEGD,KAAK,CAACE,QAAN,CAAeC,GAAf,CAAoBC,OAAD,IAClB;AACA,MAAC,OAAD,eAAaA,OAAb;AAAsB,EAAA,GAAG,EAAEA,OAAO,CAACH,EAAnC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAFD,CAFH,CADF;;AAUA,MAAMI,OAAO,GAAG,CAAC;AAAEC,EAAAA,KAAF;AAASC,EAAAA;AAAT,CAAD,KACd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAKD,KAAL,CADF,EAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAIC,IAAJ,CAFF,EAGE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAHF,CADF;;AAQAR,IAAI,CAACS,eAAL,GAAuB,OAAO;AAAEC,EAAAA;AAAF,CAAP,KAAqB;AAC1C,QAAMC,GAAG,GAAG,MAAMZ,KAAK,CAACa,GAAN,CACf,wDAAuDF,KAAK,CAACR,EAAG,EADjD,CAAlB;AAGA,QAAM;AAAEW,IAAAA;AAAF,MAAWF,GAAjB;AACAG,EAAAA,OAAO,CAACC,GAAR,CAAYF,IAAI,CAAC,CAAD,CAAhB;AACA,yCAAYH,KAAZ;AAAmBP,IAAAA,QAAQ,EAAEU;AAA7B;AACD,CAPD;;AASA,eAAeb,IAAf,C,CAEA;AACA;AACA;AAEA","sourcesContent":["import { withRouter } from 'next/router';\nimport axios from 'axios';\n\nconst Post = (props) => (\n  <div>\n    <h1>Post Page. These are the comments for post #{props.id}</h1>\n    {props.comments.map((comment) => (\n      // <p>{comment.email}</p>\n      <Comment {...comment} key={comment.id} />\n    ))}\n  </div>\n);\n\nconst Comment = ({ email, body }) => (\n  <div>\n    <h5>{email}</h5>\n    <p>{body}</p>\n    <br></br>\n  </div>\n);\n\nPost.getInitialProps = async ({ query }) => {\n  const res = await axios.get(\n    `https://jsonplaceholder.typicode.com/comments?postId=${query.id}`\n  );\n  const { data } = res;\n  console.log(data[0]);\n  return { ...query, comments: data };\n};\n\nexport default Post;\n\n//   const Post = withRouter((props) => (\n//     <h1>Post Page. You are looking at post #{props.router.query.id}</h1>\n//   ));\n\n// export default withRouter(Post);\n"]},"metadata":{},"sourceType":"module"}